{"version":3,"sources":["index.js","lib/index.js","lib/render.js","lib/compile/index.js","lib/compile/compiler.js","lib/compile/es-tokenizer.js","lib/compile/tpl-tokenizer.js","lib/compile/defaults.js","lib/compile/runtime.js","lib/compile/adapter/extend.js","lib/compile/adapter/include.js","lib/compile/adapter/onerror.js","lib/compile/adapter/caches.js","lib/compile/adapter/loader.js","lib/compile/adapter/rule.art.js","lib/compile/adapter/rule.native.js","lib/compile/adapter/html-minifier.js","lib/compile/adapter/resolve-filename.js","lib/compile/error.js","lib/defaults.js","lib/extension.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;ADIA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;AELA,ADGA,AFMA,ACHA;AELA,ADGA,AFMA,ACHA;AELA,ADGA,AFMA,ACHA;AELA,ACHA,AFMA,AFMA,ACHA;AELA,ACHA,AFMA,AFMA,ACHA;AELA,ACHA,AFMA,AFMA,ACHA;AELA,ACHA,AFMA,AGTA,ALeA,ACHA;AELA,ACHA,AFMA,AGTA,ALeA,ACHA;AELA,ACHA,AFMA,AGTA,ALeA,ACHA;AELA,AGTA,AFMA,AFMA,AGTA,ALeA,ACHA;AELA,AGTA,AFMA,AFMA,AGTA,ALeA;AGRA,AGTA,AFMA,AFMA,AGTA,ALeA;AGRA,AGTA,AFMA,AFMA,AKfA,AFMA,ALeA;AGRA,AGTA,AFMA,AFMA,AKfA,AFMA,ALeA;AGRA,AGTA,AFMA,AFMA,AKfA,AFMA,ALeA;AQvBA,ALeA,AGTA,AFMA,AFMA,AKfA,AFMA,ALeA;AQvBA,ALeA,AGTA,AFMA,AFMA,AKfA,AFMA,ALeA;AQvBA,ALeA,AGTA,AFMA,AFMA,AKfA,AFMA;AGRA,ACHA,ANkBA,AGTA,AFMA,AFMA,AKfA,AFMA;AGRA,ACHA,ANkBA,AGTA,AFMA,AFMA,AKfA,AFMA;AGRA,ACHA,ANkBA,AGTA,AFMA,AFMA,AKfA,AFMA;AGRA,ACHA,ACHA,APqBA,AGTA,AFMA,AFMA,AKfA,AFMA;AGRA,ACHA,ACHA,APqBA,AGTA,AFMA,AFMA,AKfA,AFMA;AGRA,ACHA,ACHA,APqBA,AGTA,AFMA,AFMA,AKfA,AFMA;AMjBA,AHSA,ACHA,ACHA,APqBA,AGTA,AFMA,AFMA,AKfA,AFMA;AMjBA,AHSA,ACHA,ACHA,APqBA,AGTA,AFMA,AFMA,AKfA,AFMA;AMjBA,AHSA,ACHA,ACHA,APqBA,AGTA,AFMA,AFMA,AKfA,AFMA;AMjBA,AHSA,ACHA,AGTA,AFMA,APqBA,AGTA,AFMA,AFMA,AKfA,AFMA;AMjBA,AHSA,ACHA,AGTA,AFMA,APqBA,AGTA,AFMA,AFMA,AKfA,AFMA;AMjBA,AHSA,ACHA,AGTA,AFMA,APqBA,AGTA,AJYA,AKfA,AFMA;AMjBA,AHSA,ACHA,AGTA,AFMA,AGTA,AV8BA,AGTA,AJYA,AKfA,AFMA;AMjBA,AHSA,ACHA,AGTA,AFMA,AGTA,AV8BA,AGTA,AJYA,AKfA,AFMA;AMjBA,AHSA,ACHA,AGTA,AFMA,AGTA,AV8BA,AGTA,AJYA,AKfA,AFMA;AMjBA,AHSA,ACHA,AGTA,AFMA,AGTA,ACHA,AXiCA,AGTA,AJYA,AKfA,AFMA;AMjBA,AHSA,ACHA,AGTA,ACHA,ACHA,AXiCA,AGTA,AJYA,AKfA,AFMA;AMjBA,AHSA,ACHA,AGTA,ACHA,ACHA,AXiCA,AGTA,AJYA,AKfA,AFMA;AMjBA,AHSA,AOrBA,ANkBA,AGTA,ACHA,ACHA,AXiCA,AGTA,AJYA,AKfA,AFMA;AMjBA,AHSA,AOrBA,ANkBA,AGTA,ACHA,ACHA,AXiCA,AGTA,AJYA,AKfA,AFMA;AMjBA,AHSA,AOrBA,ANkBA,AGTA,ACHA,ACHA,AXiCA,AGTA,AJYA,AKfA,AFMA;AMjBA,AHSA,AOrBA,AHSA,AIZA,AHSA,ACHA,AXiCA,AGTA,AJYA,AKfA,AFMA;AMjBA,AHSA,AOrBA,AHSA,AIZA,AHSA,ACHA,AXiCA,AGTA,AJYA,AKfA,AFMA;AMjBA,AHSA,AOrBA,AHSA,AIZA,AHSA,ACHA,AXiCA,AGTA,AJYA,AKfA,AFMA;AMjBA,AHSA,AOrBA,AHSA,AIZA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AGRA,AOrBA,AHSA,AIZA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AGRA,AOrBA,AHSA,AIZA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AGRA,AOrBA,AHSA,AIZA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,AavCA;AV+BA,AOrBA,AHSA,AIZA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,AavCA;AV+BA,AOrBA,AHSA,AIZA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,AavCA;AV+BA,AOrBA,AHSA,AIZA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,Ac1CA;AXkCA,AOrBA,ACHA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,Ac1CA;AXkCA,AOrBA,ACHA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,Ac1CA;AXkCA,AOrBA,ACHA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,Ac1CA;AJaA,ACHA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,Ac1CA;AJaA,ACHA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,Ac1CA;AJaA,ACHA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,Ac1CA;AJaA,ACHA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,Ac1CA;AJaA,ACHA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,Ac1CA;AJaA,ACHA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,Ac1CA;AJaA,ACHA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,Ac1CA;AJaA,ACHA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,Ac1CA;AJaA,ACHA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,Ac1CA;AJaA,ACHA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,Ac1CA;AJaA,ACHA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,Ac1CA;AJaA,ACHA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,Ac1CA;AJaA,ACHA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,Ac1CA;AHUA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,Ac1CA;AHUA,AHSA,ACHA,AXiCA,AGTA,AWjCA,Af6CA,AKfA,AFMA,Ac1CA;AHUA,AHSA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA,Ac1CA;AHUA,AHSA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA,Ac1CA;AHUA,AHSA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AWhCA,AHSA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AWhCA,AHSA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AWhCA,AHSA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AWhCA,AHSA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AWhCA,AHSA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AWjCA,Af6CA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AJYA,AKfA,AFMA;AQvBA,AV8BA,AGTA,AJYA,AKfA,AFMA;AQvBA,AV8BA,ADGA,AKfA;AMjBA,AV8BA,ADGA,AKfA;AMjBA,AV8BA,ADGA,AKfA;AMjBA,AV8BA,ADGA,AKfA;AMjBA,AV8BA,ADGA,AKfA;AMjBA,AV8BA,ADGA,AKfA;AMjBA,AV8BA,ADGA,AKfA;AMjBA,AV8BA,ADGA;AWhCA,AV8BA,ADGA;AWhCA,AV8BA,ADGA;AWhCA,AV8BA,ADGA;AWhCA,AV8BA,ADGA;AWhCA,AV8BA,ADGA;AWhCA,AV8BA,ADGA;AWhCA,AV8BA,ADGA;AWhCA,AV8BA,ADGA;AWhCA,AV8BA,ADGA;AWhCA,AV8BA,ADGA;AWhCA,AV8BA,ADGA;AWhCA,AV8BA,ADGA;AWhCA,AV8BA,ADGA;AWhCA,AV8BA,ADGA;AWhCA,AV8BA,ADGA;AWhCA,AV8BA,ADGA;AWhCA,AV8BA,ADGA;AWhCA,AV8BA,ADGA;AWhCA,AV8BA,ADGA;AWhCA,AV8BA,ADGA;AWhCA,AV8BA,ADGA;AWhfile":"index.js","sourcesContent":["const template = require('./lib/index');\nconst extension = require('./lib/extension');\n\ntemplate.extension = extension;\nrequire.extensions[template.defaults.extname] = extension;\n\nmodule.exports = template;\n","\n\nvar render = require('./render');\nvar compile = require('./compile');\nvar defaults = require('./defaults');\n\n/**\n * 模板引擎\n * @param   {string}            filename 模板名\n * @param   {Object|string}     content  数据或模板内容\n * @return  {string|function}            如果 content 为 string 则编译并缓存模板，否则渲染模板\n */\nvar template = function template(filename, content) {\n    return content instanceof Object ? render({\n        filename: filename\n    }, content) : compile({\n        filename: filename,\n        source: content\n    });\n};\n\ntemplate.render = render;\ntemplate.compile = compile;\ntemplate.defaults = defaults;\n\nmodule.exports = template;","\n\nvar compile = require('./compile');\n\n/**\n * 渲染模板\n * @param   {string|Object}     source  模板内容\n * @param   {Object}            data    数据\n * @param   {?Object}           options 选项\n * @return  {string}            渲染好的字符串\n */\nvar render = function render(source, data, options) {\n  return compile(source, options)(data);\n};\n\nmodule.exports = render;","\n\nvar Compiler = require('./compiler');\nvar defaults = require('./defaults');\nvar TemplateError = require('./error');\n\nvar debugRender = function debugRender(error, options) {\n    options.onerror(error, options);\n    var render = function render() {\n        return '{Template Error}';\n    };\n    render.mappings = [];\n    render.sourcesContent = [];\n    return render;\n};\n\n/**\n * 编译模版\n * @param {string|Object} source   模板内容\n * @param {?Object}       options  编译选项\n * @return {function}\n */\nvar compile = function compile(source) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (typeof source !== 'string') {\n        options = source;\n    } else {\n        options.source = source;\n    }\n\n    // 合并默认配置\n    options = defaults.$extend(options);\n    source = options.source;\n\n    // debug 模式\n    /* istanbul ignore if */\n    if (options.debug === true) {\n        options.cache = false;\n        options.minimize = false;\n        options.compileDebug = true;\n    }\n\n    if (options.compileDebug) {\n        options.minimize = false;\n    }\n\n    // 转换成绝对路径\n    if (options.filename) {\n        options.filename = options.resolveFilename(options.filename, options);\n    }\n\n    var filename = options.filename;\n    var cache = options.cache;\n    var caches = options.caches;\n\n    // 匹配缓存\n    if (cache && filename) {\n        var _render = caches.get(filename);\n        if (_render) {\n            return _render;\n        }\n    }\n\n    // 加载外部模板\n    if (!source) {\n        try {\n            source = options.loader(filename, options);\n            options.source = source;\n        } catch (e) {\n            var error = new TemplateError({\n                name: 'CompileError',\n                path: filename,\n                message: 'template not found: ' + e.message,\n                stack: e.stack\n            });\n\n            if (options.bail) {\n                throw error;\n            } else {\n                return debugRender(error, options);\n            }\n        }\n    }\n\n    var fn = void 0;\n    var compiler = new Compiler(options);\n\n    try {\n        fn = compiler.build();\n    } catch (error) {\n        error = new TemplateError(error);\n        if (options.bail) {\n            throw error;\n        } else {\n            return debugRender(error, options);\n        }\n    }\n\n    var render = function render(data, blocks) {\n        try {\n            return fn(data, blocks);\n        } catch (error) {\n            // 运行时出错以调试模式重载\n            if (!options.compileDebug) {\n                options.cache = false;\n                options.compileDebug = true;\n                return compile(options)(data, blocks);\n            }\n\n            error = new TemplateError(error);\n\n            if (options.bail) {\n                throw error;\n            } else {\n                return debugRender(error, options)();\n            }\n        }\n    };\n\n    render.mappings = fn.mappings;\n    render.sourcesContent = fn.sourcesContent;\n    render.toString = function () {\n        return fn.toString();\n    };\n\n    if (cache && filename) {\n        caches.set(filename, render);\n    }\n\n    return render;\n};\n\ncompile.Compiler = Compiler;\n\nmodule.exports = compile;","\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar esTokenizer = require('./es-tokenizer');\nvar tplTokenizer = require('./tpl-tokenizer');\n\n/** 传递给模板的数据引用 */\nvar DATA = '$data';\n\n/** 外部导入的所有全局变量引用 */\nvar IMPORTS = '$imports';\n\n/**  $imports.$escape */\nvar ESCAPE = '$escape';\n\n/**  $imports.$each */\nvar EACH = '$each';\n\n/** 文本输出函数 */\nvar PRINT = 'print';\n\n/** 包含子模板函数 */\nvar INCLUDE = 'include';\n\n/** 继承布局模板函数 */\nvar EXTEND = 'extend';\n\n/** “模板块”读写函数 */\nvar BLOCK = 'block';\n\n/** 字符串拼接变量 */\nvar OUT = '$$out';\n\n/** 运行时逐行调试记录变量 [line, start, source] */\nvar LINE = '$$line';\n\n/** 所有“模板块”变量 */\nvar BLOCKS = '$$blocks';\n\n/** 截取模版输出“流”的函数 */\nvar SLICE = '$$slice';\n\n/** 继承的布局模板的文件地址变量 */\nvar FROM = '$$from';\n\n/** 编译设置变量 */\nvar OPTIONS = '$$options';\n\nvar has = function has(object, key) {\n    return Object.hasOwnProperty.call(object, key);\n};\nvar stringify = JSON.stringify;\n\nvar Compiler = function () {\n    /**\n     * 模板编译器\n     * @param   {Object}    options\n     */\n    function Compiler(options) {\n        var _internal,\n            _dependencies,\n            _this = this;\n\n        _classCallCheck(this, Compiler);\n\n        var source = options.source;\n        var minimize = options.minimize;\n        var htmlMinifier = options.htmlMinifier;\n\n        // 编译选项\n        this.options = options;\n\n        // 所有语句堆栈\n        this.stacks = [];\n\n        // 运行时注入的上下文\n        this.context = [];\n\n        // 模板语句编译后的代码\n        this.scripts = [];\n\n        // context map\n        this.CONTEXT_MAP = {};\n\n        // 忽略的变量名单\n        this.ignore = [DATA, IMPORTS, OPTIONS].concat(_toConsumableArray(options.ignore));\n\n        // 按需编译到模板渲染函数的内置变量\n        this.internal = (_internal = {}, _defineProperty(_internal, OUT, '\\'\\''), _defineProperty(_internal, LINE, '[0,0]'), _defineProperty(_internal, BLOCKS, 'arguments[1]||{}'), _defineProperty(_internal, FROM, 'null'), _defineProperty(_internal, PRINT, 'function(){var s=\\'\\'.concat.apply(\\'\\',arguments);' + OUT + '+=s;return s}'), _defineProperty(_internal, INCLUDE, 'function(src,data){var s=' + OPTIONS + '.include(src,data||' + DATA + ',arguments[2]||' + BLOCKS + ',' + OPTIONS + ');' + OUT + '+=s;return s}'), _defineProperty(_internal, EXTEND, 'function(from){' + FROM + '=from}'), _defineProperty(_internal, SLICE, 'function(c,p,s){p=' + OUT + ';' + OUT + '=\\'\\';c();s=' + OUT + ';' + OUT + '=p+s;return s}'), _defineProperty(_internal, BLOCK, 'function(){var a=arguments,s;if(typeof a[0]===\\'function\\'){return ' + SLICE + '(a[0])}else if(' + FROM + '){if(!' + BLOCKS + '[a[0]]){' + BLOCKS + '[a[0]]=' + SLICE + '(a[1])}else{' + OUT + '+=' + BLOCKS + '[a[0]]}}else{s=' + BLOCKS + '[a[0]];if(typeof s===\\'string\\'){' + OUT + '+=s}else{s=' + SLICE + '(a[1])}return s}}'), _internal);\n\n        // 内置函数依赖关系声明\n        this.dependencies = (_dependencies = {}, _defineProperty(_dependencies, PRINT, [OUT]), _defineProperty(_dependencies, INCLUDE, [OUT, OPTIONS, DATA, BLOCKS]), _defineProperty(_dependencies, EXTEND, [FROM, /*[*/INCLUDE /*]*/]), _defineProperty(_dependencies, BLOCK, [SLICE, FROM, OUT, BLOCKS]), _dependencies);\n\n        this.importContext(OUT);\n\n        if (options.compileDebug) {\n            this.importContext(LINE);\n        }\n\n        if (minimize) {\n            try {\n                source = htmlMinifier(source, options);\n            } catch (error) {}\n        }\n\n        this.source = source;\n        this.getTplTokens(source, options.rules, this).forEach(function (tokens) {\n            if (tokens.type === tplTokenizer.TYPE_STRING) {\n                _this.parseString(tokens);\n            } else {\n                _this.parseExpression(tokens);\n            }\n        });\n    }\n\n    /**\n     * 将模板代码转换成 tplToken 数组\n     * @param   {string} source\n     * @return  {Object[]}\n     */\n\n\n    _createClass(Compiler, [{\n        key: 'getTplTokens',\n        value: function getTplTokens() {\n            return tplTokenizer.apply(undefined, arguments);\n        }\n\n        /**\n         * 将模板表达式转换成 esToken 数组\n         * @param   {string} source\n         * @return  {Object[]}\n         */\n\n    }, {\n        key: 'getEsTokens',\n        value: function getEsTokens(source) {\n            return esTokenizer(source);\n        }\n\n        /**\n         * 获取变量列表\n         * @param {Object[]} esTokens\n         * @return {string[]}\n         */\n\n    }, {\n        key: 'getVariables',\n        value: function getVariables(esTokens) {\n            var ignore = false;\n            return esTokens.filter(function (esToken) {\n                return esToken.type !== 'whitespace' && esToken.type !== 'comment';\n            }).filter(function (esToken) {\n                if (esToken.type === 'name' && !ignore) {\n                    return true;\n                }\n\n                ignore = esToken.type === 'punctuator' && esToken.value === '.';\n\n                return false;\n            }).map(function (tooken) {\n                return tooken.value;\n            });\n        }\n\n        /**\n         * 导入模板上下文\n         * @param {string} name\n         */\n\n    }, {\n        key: 'importContext',\n        value: function importContext(name) {\n            var _this2 = this;\n\n            var value = '';\n            var internal = this.internal;\n            var dependencies = this.dependencies;\n            var ignore = this.ignore;\n            var context = this.context;\n            var options = this.options;\n            var imports = options.imports;\n            var contextMap = this.CONTEXT_MAP;\n\n            if (!has(contextMap, name) && ignore.indexOf(name) === -1) {\n                if (has(internal, name)) {\n                    value = internal[name];\n\n                    if (has(dependencies, name)) {\n                        dependencies[name].forEach(function (name) {\n                            return _this2.importContext(name);\n                        });\n                    }\n\n                    // imports 继承了 Global，但是继承的属性不分配到顶级变量中，避免占用了模板内部的变量名称\n                } else if (name === ESCAPE || name === EACH || has(imports, name)) {\n                    value = IMPORTS + '.' + name;\n                } else {\n                    value = DATA + '.' + name;\n                }\n\n                contextMap[name] = value;\n                context.push({\n                    name: name,\n                    value: value\n                });\n            }\n        }\n\n        /**\n         * 解析字符串（HTML）直接输出语句\n         * @param {Object} tplToken\n         */\n\n    }, {\n        key: 'parseString',\n        value: function parseString(tplToken) {\n            var source = tplToken.value;\n\n            if (!source) {\n                return;\n            }\n\n            var code = OUT + '+=' + stringify(source);\n            this.scripts.push({\n                source: source,\n                tplToken: tplToken,\n                code: code\n            });\n        }\n\n        /**\n         * 解析逻辑表达式语句\n         * @param {Object} tplToken\n         */\n\n    }, {\n        key: 'parseExpression',\n        value: function parseExpression(tplToken) {\n            var _this3 = this;\n\n            var source = tplToken.value;\n            var script = tplToken.script;\n            var output = script.output;\n            var escape = this.options.escape;\n            var code = script.code;\n\n            if (output) {\n                if (escape === false || output === tplTokenizer.TYPE_RAW) {\n                    code = OUT + '+=' + script.code;\n                } else {\n                    code = OUT + '+=' + ESCAPE + '(' + script.code + ')';\n                }\n            }\n\n            var esToken = this.getEsTokens(code);\n            this.getVariables(esToken).forEach(function (name) {\n                return _this3.importContext(name);\n            });\n\n            this.scripts.push({\n                source: source,\n                tplToken: tplToken,\n                code: code\n            });\n        }\n\n        /**\n         * 检查解析后的模板语句是否存在语法错误\n         * @param  {string} script\n         * @return {boolean}\n         */\n\n    }, {\n        key: 'checkExpression',\n        value: function checkExpression(script) {\n            // 没有闭合的块级模板语句规则\n            // 基于正则规则来补全语法不能保证 100% 准确，\n            // 但是在绝大多数情况下足以满足辅助开发调试的需要\n            var rules = [\n            // <% } %>\n            // <% }else{ %>\n            // <% }else if(a){ %>\n            [/^\\s*}[\\w\\W]*?{?[\\s;]*$/, ''],\n\n            // <% fn(c,function(a,b){ %>\n            // <% fn(c, a=>{ %>\n            // <% fn(c,(a,b)=>{ %>\n            [/(^[\\w\\W]*?\\([\\w\\W]*?(?:=>|\\([\\w\\W]*?\\))\\s*{[\\s;]*$)/, '$1})'],\n\n            // <% if(a){ %>\n            // <% for(var i in d){ %>\n            [/(^[\\w\\W]*?\\([\\w\\W]*?\\)\\s*{[\\s;]*$)/, '$1}']];\n\n            var index = 0;\n            while (index < rules.length) {\n                if (rules[index][0].test(script)) {\n                    var _script;\n\n                    script = (_script = script).replace.apply(_script, _toConsumableArray(rules[index]));\n                    break;\n                }\n                index++;\n            }\n\n            try {\n                new Function(script);\n                return true;\n            } catch (e) {\n                return false;\n            }\n        }\n\n        /**\n         * 编译\n         * @return  {function}\n         */\n\n    }, {\n        key: 'build',\n        value: function build() {\n            var options = this.options;\n            var context = this.context;\n            var scripts = this.scripts;\n            var stacks = this.stacks;\n            var source = this.source;\n            var filename = options.filename;\n            var imports = options.imports;\n            var mappings = [];\n            var extendMode = has(this.CONTEXT_MAP, EXTEND);\n\n            var offsetLine = 0;\n\n            // Create SourceMap: mapping\n            var mapping = function mapping(code, _ref) {\n                var line = _ref.line,\n                    start = _ref.start;\n\n                var node = {\n                    generated: {\n                        line: stacks.length + offsetLine + 1,\n                        column: 1\n                    },\n                    original: {\n                        line: line + 1,\n                        column: start + 1\n                    }\n                };\n\n                offsetLine += code.split(/\\n/).length - 1;\n                return node;\n            };\n\n            // Trim code\n            var trim = function trim(code) {\n                return code.replace(/^[\\t ]+|[\\t ]$/g, '');\n            };\n\n            stacks.push('function(' + DATA + '){');\n            stacks.push('\\'use strict\\'');\n            stacks.push(DATA + '=' + DATA + '||{}');\n            stacks.push('var ' + context.map(function (_ref2) {\n                var name = _ref2.name,\n                    value = _ref2.value;\n                return name + '=' + value;\n            }).join(','));\n\n            if (options.compileDebug) {\n                stacks.push('try{');\n\n                scripts.forEach(function (script) {\n                    if (script.tplToken.type === tplTokenizer.TYPE_EXPRESSION) {\n                        stacks.push(LINE + '=[' + [script.tplToken.line, script.tplToken.start].join(',') + ']');\n                    }\n\n                    mappings.push(mapping(script.code, script.tplToken));\n                    stacks.push(trim(script.code));\n                });\n\n                stacks.push('}catch(error){');\n\n                stacks.push('throw {' + ['name:\\'RuntimeError\\'', 'path:' + stringify(filename), 'message:error.message', 'line:' + LINE + '[0]+1', 'column:' + LINE + '[1]+1', 'source:' + stringify(source), 'stack:error.stack'].join(',') + '}');\n\n                stacks.push('}');\n            } else {\n                scripts.forEach(function (script) {\n                    mappings.push(mapping(script.code, script.tplToken));\n                    stacks.push(trim(script.code));\n                });\n            }\n\n            if (extendMode) {\n                stacks.push(OUT + '=\\'\\'');\n                stacks.push(INCLUDE + '(' + FROM + ',' + DATA + ',' + BLOCKS + ')');\n            }\n\n            stacks.push('return ' + OUT);\n            stacks.push('}');\n\n            var renderCode = stacks.join('\\n');\n\n            try {\n                var result = new Function(IMPORTS, OPTIONS, 'return ' + renderCode)(imports, options);\n                result.mappings = mappings;\n                result.sourcesContent = [source];\n                return result;\n            } catch (error) {\n                var index = 0;\n                var line = 0;\n                var start = 0;\n                var generated = void 0;\n\n                while (index < scripts.length) {\n                    var current = scripts[index];\n                    if (!this.checkExpression(current.code)) {\n                        line = current.tplToken.line;\n                        start = current.tplToken.start;\n                        generated = current.code;\n                        break;\n                    }\n                    index++;\n                }\n\n                throw {\n                    name: 'CompileError',\n                    path: filename,\n                    message: error.message,\n                    line: line + 1,\n                    column: start + 1,\n                    source: source,\n                    generated: generated,\n                    stack: error.stack\n                };\n            }\n        }\n    }]);\n\n    return Compiler;\n}();\n\n/**\n * 模板内置常量\n */\n\n\nCompiler.CONSTS = {\n    DATA: DATA,\n    IMPORTS: IMPORTS,\n    PRINT: PRINT,\n    INCLUDE: INCLUDE,\n    EXTEND: EXTEND,\n    BLOCK: BLOCK,\n    OPTIONS: OPTIONS,\n    OUT: OUT,\n    LINE: LINE,\n    BLOCKS: BLOCKS,\n    SLICE: SLICE,\n    FROM: FROM,\n    ESCAPE: ESCAPE,\n    EACH: EACH\n};\n\nmodule.exports = Compiler;","\n\nvar isKeyword = require('is-keyword-js');\nvar jsTokens = require('js-tokens').default;\nvar matchToToken = require('js-tokens').matchToToken;\n\n/**\n * 将逻辑表达式解释为 Tokens\n * @param {string} code\n * @return {Object[]}\n */\nvar esTokenizer = function esTokenizer(code) {\n    var tokens = code.match(jsTokens).map(function (value) {\n        jsTokens.lastIndex = 0;\n        return matchToToken(jsTokens.exec(value));\n    }).map(function (token) {\n        if (token.type === 'name' && isKeyword(token.value)) {\n            token.type = 'keyword';\n        }\n        return token;\n    });\n\n    return tokens;\n};\n\nmodule.exports = esTokenizer;","\n\nvar TYPE_STRING = 'string';\nvar TYPE_EXPRESSION = 'expression';\nvar TYPE_RAW = 'raw';\nvar TYPE_ESCAPE = 'escape';\n\nfunction wrapString(token) {\n    var value = new String(token.value);\n    value.line = token.line;\n    value.start = token.start;\n    value.end = token.end;\n    return value;\n}\n\nfunction Token(type, value, prevToken) {\n    this.type = type;\n    this.value = value;\n    this.script = null;\n\n    if (prevToken) {\n        this.line = prevToken.line + prevToken.value.split(/\\n/).length - 1;\n        if (this.line === prevToken.line) {\n            this.start = prevToken.end;\n        } else {\n            this.start = prevToken.value.length - prevToken.value.lastIndexOf('\\n') - 1;\n        }\n    } else {\n        this.line = 0;\n        this.start = 0;\n    }\n\n    this.end = this.start + this.value.length;\n}\n\n/**\n * 将模板转换为 Tokens\n * @param {string}      source\n * @param {Object[]}    rules     @see defaults.rules\n * @param {Object}      context\n * @return {Object[]}\n */\nvar tplTokenizer = function tplTokenizer(source, rules) {\n    var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var tokens = [new Token(TYPE_STRING, source)];\n\n    for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i];\n        var flags = rule.test.ignoreCase ? 'ig' : 'g';\n        var regexp = new RegExp(rule.test.source, flags);\n\n        for (var _i = 0; _i < tokens.length; _i++) {\n            var token = tokens[_i];\n            var prevToken = tokens[_i - 1];\n\n            if (token.type !== TYPE_STRING) {\n                continue;\n            }\n\n            var match = void 0,\n                index = 0;\n            var substitute = [];\n            var value = token.value;\n\n            while ((match = regexp.exec(value)) !== null) {\n                if (match.index > index) {\n                    prevToken = new Token(TYPE_STRING, value.slice(index, match.index), prevToken);\n                    substitute.push(prevToken);\n                }\n\n                prevToken = new Token(TYPE_EXPRESSION, match[0], prevToken);\n                match[0] = wrapString(prevToken);\n                prevToken.script = rule.use.apply(context, match);\n                substitute.push(prevToken);\n\n                index = match.index + match[0].length;\n            }\n\n            if (index < value.length) {\n                prevToken = new Token(TYPE_STRING, value.slice(index), prevToken);\n                substitute.push(prevToken);\n            }\n\n            tokens.splice.apply(tokens, [_i, 1].concat(substitute));\n            _i += substitute.length - 1;\n        }\n    }\n\n    return tokens;\n};\n\ntplTokenizer.TYPE_STRING = TYPE_STRING;\ntplTokenizer.TYPE_EXPRESSION = TYPE_EXPRESSION;\ntplTokenizer.TYPE_RAW = TYPE_RAW;\ntplTokenizer.TYPE_ESCAPE = TYPE_ESCAPE;\n\nmodule.exports = tplTokenizer;","\n\nvar runtime = require('./runtime');\nvar extend = require('./adapter/extend');\nvar include = require('./adapter/include');\nvar onerror = require('./adapter/onerror');\nvar caches = require('./adapter/caches');\nvar loader = require('./adapter/loader');\nvar artRule = require('./adapter/rule.art');\nvar nativeRule = require('./adapter/rule.native');\nvar htmlMinifier = require('./adapter/html-minifier');\nvar resolveFilename = require('./adapter/resolve-filename');\n\nvar detectNode = typeof window === 'undefined';\n\n/** 模板编译器默认配置 */\nvar settings = {\n    // 模板内容。如果没有此字段，则会根据 filename 来加载模板内容\n    source: null,\n\n    // 模板名\n    filename: null,\n\n    // 模板语法规则列表\n    rules: [nativeRule, artRule],\n\n    // 是否开启对模板输出语句自动编码功能。为 false 则关闭编码输出功能\n    // escape 可以防范 XSS 攻击\n    escape: true,\n\n    // 启动模板引擎调试模式。如果为 true: {cache:false, minimize:false, compileDebug:true}\n    debug: detectNode ? process.env.NODE_ENV !== 'production' : false,\n\n    // bail 如果为 true，编译错误与运行时错误都会抛出异常\n    bail: true,\n\n    // 是否开启缓存\n    cache: true,\n\n    // 是否开启压缩。它会运行 htmlMinifier，将页面 HTML、CSS、CSS 进行压缩输出\n    // 如果模板包含没有闭合的 HTML 标签，请不要打开 minimize，否则可能被 htmlMinifier 修复或过滤\n    minimize: true,\n\n    // 是否编译调试版\n    compileDebug: false,\n\n    // 模板路径转换器\n    resolveFilename: resolveFilename,\n\n    // 子模板编译适配器\n    include: include,\n\n    // HTML 压缩器。仅在 NodeJS 环境下有效\n    htmlMinifier: htmlMinifier,\n\n    // HTML 压缩器配置。参见 https://github.com/kangax/html-minifier\n    htmlMinifierOptions: {\n        collapseWhitespace: true,\n        minifyCSS: true,\n        minifyJS: true,\n        // 运行时自动合并：rules.map(rule => rule.test)\n        ignoreCustomFragments: []\n    },\n\n    // 错误事件。仅在 bail 为 false 时生效\n    onerror: onerror,\n\n    // 模板文件加载器\n    loader: loader,\n\n    // 缓存中心适配器（依赖 filename 字段）\n    caches: caches,\n\n    // 模板根目录。如果 filename 字段不是本地路径，则在 root 查找模板\n    root: '/',\n\n    // 默认后缀名。如果没有后缀名，则会自动添加 extname\n    extname: '.art',\n\n    // 忽略的变量。被模板编译器忽略的模板变量列表\n    ignore: [],\n\n    // 导入的模板变量\n    imports: runtime\n};\n\nfunction Defaults() {\n    this.$extend = function (options) {\n        options = options || {};\n        return extend(options, options instanceof Defaults ? options : this);\n    };\n}\nDefaults.prototype = settings;\n\nmodule.exports = new Defaults();","\n\n/*! art-template@runtime | https://github.com/aui/art-template */\n\nvar globalThis = typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {};\n\nvar runtime = Object.create(globalThis);\nvar ESCAPE_REG = /[\"&'<>]/;\n\n/**\n * 编码模板输出的内容\n * @param  {any}        content\n * @return {string}\n */\nruntime.$escape = function (content) {\n    return xmlEscape(toString(content));\n};\n\n/**\n * 迭代器，支持数组与对象\n * @param {array|Object} data\n * @param {function}     callback\n */\nruntime.$each = function (data, callback) {\n    if (Array.isArray(data)) {\n        for (var i = 0, len = data.length; i < len; i++) {\n            callback(data[i], i);\n        }\n    } else {\n        for (var _i in data) {\n            callback(data[_i], _i);\n        }\n    }\n};\n\n// 将目标转成字符\nfunction toString(value) {\n    if (typeof value !== 'string') {\n        if (value === undefined || value === null) {\n            value = '';\n        } else if (typeof value === 'function') {\n            value = toString(value.call(value));\n        } else {\n            value = JSON.stringify(value);\n        }\n    }\n\n    return value;\n}\n\n// 编码 HTML 内容\nfunction xmlEscape(content) {\n    var html = '' + content;\n    var regexResult = ESCAPE_REG.exec(html);\n    if (!regexResult) {\n        return content;\n    }\n\n    var result = '';\n    var i = void 0,\n        lastIndex = void 0,\n        char = void 0;\n    for (i = regexResult.index, lastIndex = 0; i < html.length; i++) {\n        switch (html.charCodeAt(i)) {\n            case 34:\n                char = '&#34;';\n                break;\n            case 38:\n                char = '&#38;';\n                break;\n            case 39:\n                char = '&#39;';\n                break;\n            case 60:\n                char = '&#60;';\n                break;\n            case 62:\n                char = '&#62;';\n                break;\n            default:\n                continue;\n        }\n\n        if (lastIndex !== i) {\n            result += html.substring(lastIndex, i);\n        }\n\n        lastIndex = i + 1;\n        result += char;\n    }\n\n    if (lastIndex !== i) {\n        return result + html.substring(lastIndex, i);\n    } else {\n        return result;\n    }\n}\n\nmodule.exports = runtime;","\n\nvar toString = Object.prototype.toString;\nvar toType = function toType(value) {\n    // Null: 兼容 IE8\n    return value === null ? 'Null' : toString.call(value).slice(8, -1);\n};\n\n/**\n * 快速继承默认配置\n * @param   {Object}    options\n * @param   {?Object}   defaults\n * @return  {Object}\n */\nvar extend = function extend(target, defaults) {\n    var object = void 0;\n    var type = toType(target);\n\n    if (type === 'Object') {\n        object = Object.create(defaults || {});\n    } else if (type === 'Array') {\n        object = [].concat(defaults || []);\n    }\n\n    if (object) {\n        for (var index in target) {\n            if (Object.hasOwnProperty.call(target, index)) {\n                object[index] = extend(target[index], object[index]);\n            }\n        }\n        return object;\n    } else {\n        return target;\n    }\n};\n\nmodule.exports = extend;","\n\n/**\n * 载入子模板\n * @param   {string}    filename\n * @param   {Object}    data\n * @param   {Object}    blocks\n * @param   {Object}    options\n * @return  {string}\n */\nvar include = function include(filename, data, blocks, options) {\n    var compile = require('../index');\n    options = options.$extend({\n        filename: options.resolveFilename(filename, options),\n        bail: true,\n        source: null\n    });\n    return compile(options)(data, blocks);\n};\n\nmodule.exports = include;","\n\n/**\n * 调试器\n * @param   {Object}    error\n * @param   {?Object}   options\n * @return  {string}\n */\nvar onerror = function onerror(error /*, options*/) {\n  console.error(error.name, error.message);\n};\n\nmodule.exports = onerror;","\n\nvar caches = {\n    __data: Object.create(null),\n\n    set: function set(key, val) {\n        this.__data[key] = val;\n    },\n\n    get: function get(key) {\n        return this.__data[key];\n    },\n\n    reset: function reset() {\n        this.__data = {};\n    }\n};\n\nmodule.exports = caches;","\n\nvar detectNode = typeof window === 'undefined';\n\n/**\n * 读取模板内容（同步方法）\n * @param   {string}    filename   模板名\n * @param   {?Object}   options\n * @return  {string}\n */\nvar loader = function loader(filename /*, options*/) {\n    /* istanbul ignore else  */\n    if (detectNode) {\n        var fs = require('fs');\n        return fs.readFileSync(filename, 'utf8');\n    } else {\n        var elem = document.getElementById(filename);\n        return elem.value || elem.innerHTML;\n    }\n};\n\nmodule.exports = loader;","\n\n/**\n * 简洁模板语法规则\n */\nvar artRule = {\n    test: /{{([@#]?)[ \\t]*(\\/?)([\\w\\W]*?)[ \\t]*}}/,\n    use: function use(match, raw, close, code) {\n        var compiler = this;\n        var options = compiler.options;\n        var esTokens = compiler.getEsTokens(code);\n        var values = esTokens.map(function (token) {\n            return token.value;\n        });\n        var result = {};\n\n        var group = void 0;\n        var output = raw ? 'raw' : false;\n        var key = close + values.shift();\n\n        // 旧版语法升级提示\n        var warn = function warn(oldSyntax, newSyntax) {\n            console.warn((options.filename || 'anonymous') + ':' + (match.line + 1) + ':' + (match.start + 1) + '\\n' + ('Template upgrade: {{' + oldSyntax + '}} -> {{' + newSyntax + '}}'));\n        };\n\n        // v3 compat: #value\n        if (raw === '#') {\n            warn('#value', '@value');\n        }\n\n        switch (key) {\n            case 'set':\n                code = 'var ' + values.join('').trim();\n                break;\n\n            case 'if':\n                code = 'if(' + values.join('').trim() + '){';\n\n                break;\n\n            case 'else':\n                var indexIf = values.indexOf('if');\n\n                if (~indexIf) {\n                    values.splice(0, indexIf + 1);\n                    code = '}else if(' + values.join('').trim() + '){';\n                } else {\n                    code = '}else{';\n                }\n\n                break;\n\n            case '/if':\n                code = '}';\n                break;\n\n            case 'each':\n                group = artRule._split(esTokens);\n                group.shift();\n\n                if (group[1] === 'as') {\n                    // ... v3 compat ...\n                    warn('each object as value index', 'each object value index');\n                    group.splice(1, 1);\n                }\n\n                var object = group[0] || '$data';\n                var value = group[1] || '$value';\n                var index = group[2] || '$index';\n\n                code = '$each(' + object + ',function(' + value + ',' + index + '){';\n\n                break;\n\n            case '/each':\n                code = '})';\n                break;\n\n            case 'block':\n                group = artRule._split(esTokens);\n                group.shift();\n                code = 'block(' + group.join(',').trim() + ',function(){';\n                break;\n\n            case '/block':\n                code = '})';\n                break;\n\n            case 'echo':\n                key = 'print';\n                warn('echo value', 'value');\n            case 'print':\n            case 'include':\n            case 'extend':\n                if (values.join('').trim().indexOf('(') !== 0) {\n                    // 执行函数省略 `()` 与 `,`\n                    group = artRule._split(esTokens);\n                    group.shift();\n                    code = key + '(' + group.join(',') + ')';\n                    break;\n                }\n\n            default:\n                if (~values.indexOf('|')) {\n                    var v3split = ':'; // ... v3 compat ...\n\n                    // 将过滤器解析成二维数组\n                    var _group = esTokens.reduce(function (group, token) {\n                        var value = token.value,\n                            type = token.type;\n\n                        if (value === '|') {\n                            group.push([]);\n                        } else if (type !== 'whitespace' && type !== 'comment') {\n                            if (!group.length) {\n                                group.push([]);\n                            }\n                            if (value === v3split && group[group.length - 1].length === 1) {\n                                warn('value | filter: argv', 'value | filter argv');\n                            } else {\n                                group[group.length - 1].push(token);\n                            }\n                        }\n                        return group;\n                    }, []).map(function (g) {\n                        return artRule._split(g);\n                    });\n\n                    // 将过滤器管道化\n                    code = _group.reduce(function (accumulator, filter) {\n                        var name = filter.shift();\n                        filter.unshift(accumulator);\n\n                        return '$imports.' + name + '(' + filter.join(',') + ')';\n                    }, _group.shift().join(' ').trim());\n                }\n\n                output = output || 'escape';\n\n                break;\n        }\n\n        result.code = code;\n        result.output = output;\n\n        return result;\n    },\n\n    // 将多个 javascript 表达式拆分成组\n    // 支持基本运算、三元表达式、取值、运行函数，不支持 `typeof value` 操作\n    // 只支持 string、number、boolean、null、undefined 这几种类型声明，不支持 function、object、array\n    _split: function _split(esTokens) {\n        esTokens = esTokens.filter(function (_ref) {\n            var type = _ref.type;\n\n            return type !== 'whitespace' && type !== 'comment';\n        });\n\n        var current = 0;\n        var lastToken = esTokens.shift();\n        var punctuator = 'punctuator';\n        var close = /\\]|\\)/;\n        var group = [[lastToken]];\n\n        while (current < esTokens.length) {\n            var esToken = esTokens[current];\n\n            if (esToken.type === punctuator || lastToken.type === punctuator && !close.test(lastToken.value)) {\n                group[group.length - 1].push(esToken);\n            } else {\n                group.push([esToken]);\n            }\n\n            lastToken = esToken;\n\n            current++;\n        }\n\n        return group.map(function (g) {\n            return g.map(function (g) {\n                return g.value;\n            }).join('');\n        });\n    }\n};\n\nmodule.exports = artRule;","\n\n/**\n * 原生模板语法规则\n */\nvar nativeRule = {\n    test: /<%(#?)((?:==|=#|[=-])?)[ \\t]*([\\w\\W]*?)[ \\t]*(-?)%>/,\n    use: function use(match, comment, output, code /*, trimMode*/) {\n        output = {\n            '-': 'raw',\n            '=': 'escape',\n            '': false,\n            // v3 compat: raw output\n            '==': 'raw',\n            '=#': 'raw'\n        }[output];\n\n        // ejs compat: comment tag\n        if (comment) {\n            code = '/*' + code + '*/';\n            output = false;\n        }\n\n        // ejs compat: trims following newline\n        // if (trimMode) {}\n\n        return {\n            code: code,\n            output: output\n        };\n    }\n};\n\nmodule.exports = nativeRule;","\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar detectNode = typeof window === 'undefined';\n\n/**\n * HTML 压缩器\n * @param  {string}     source\n * @param  {Object}     options\n * @return {string}\n */\nvar htmlMinifier = function htmlMinifier(source, options) {\n    if (detectNode) {\n        var _htmlMinifierOptions$;\n\n        var _htmlMinifier = require('html-minifier').minify;\n        var htmlMinifierOptions = options.htmlMinifierOptions;\n        var ignoreCustomFragments = options.rules.map(function (rule) {\n            return rule.test;\n        });\n        (_htmlMinifierOptions$ = htmlMinifierOptions.ignoreCustomFragments).push.apply(_htmlMinifierOptions$, _toConsumableArray(ignoreCustomFragments));\n        source = _htmlMinifier(source, htmlMinifierOptions);\n    }\n\n    return source;\n};\n\nmodule.exports = htmlMinifier;","\n\nvar detectNode = typeof window === 'undefined';\nvar LOCAL_MODULE = /^\\.+\\//;\n\n/**\n * 获取模板的绝对路径\n * @param   {string} filename\n * @param   {Object} options\n * @return  {string}\n */\nvar resolveFilename = function resolveFilename(filename, options) {\n    /* istanbul ignore else  */\n    if (detectNode) {\n        var path = require('path');\n        var root = options.root;\n        var extname = options.extname;\n\n        if (LOCAL_MODULE.test(filename)) {\n            var from = options.filename;\n            var self = !from || filename === from;\n            var base = self ? root : path.dirname(from);\n            filename = path.resolve(base, filename);\n        } else {\n            filename = path.resolve(root, filename);\n        }\n\n        if (!path.extname(filename)) {\n            filename = filename + extname;\n        }\n    }\n\n    return filename;\n};\n\nmodule.exports = resolveFilename;","\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n * 模板错误处理类\n * @param   {Object}    options\n */\nvar TemplateError = function (_Error) {\n    _inherits(TemplateError, _Error);\n\n    function TemplateError(options) {\n        _classCallCheck(this, TemplateError);\n\n        var _this = _possibleConstructorReturn(this, (TemplateError.__proto__ || Object.getPrototypeOf(TemplateError)).call(this, options.message));\n\n        _this.name = 'TemplateError';\n        _this.message = formatMessage(options);\n        if (Error.captureStackTrace) {\n            Error.captureStackTrace(_this, _this.constructor);\n        }\n        return _this;\n    }\n\n    return TemplateError;\n}(Error);\n\nfunction formatMessage(_ref) {\n    var name = _ref.name,\n        source = _ref.source,\n        path = _ref.path,\n        line = _ref.line,\n        column = _ref.column,\n        generated = _ref.generated,\n        message = _ref.message;\n\n    if (!source) {\n        return message;\n    }\n\n    var lines = source.split(/\\n/);\n    var start = Math.max(line - 3, 0);\n    var end = Math.min(lines.length, line + 3);\n\n    // Error context\n    var context = lines.slice(start, end).map(function (code, index) {\n        var number = index + start + 1;\n        var left = number === line ? ' >> ' : '    ';\n        return '' + left + number + '| ' + code;\n    }).join('\\n');\n\n    // Alter exception message\n    return (path || 'anonymous') + ':' + line + ':' + column + '\\n' + (context + '\\n\\n') + (name + ': ' + message) + (generated ? '\\n   generated: ' + generated : '');\n}\n\nmodule.exports = TemplateError;","\n\nmodule.exports = require('./compile/defaults');","\n\nvar templatePath = require.resolve('./index.js');\n\n/**\n * require.extensions 扩展注册函数\n * 使用动态编译机制\n * @param {Object} module\n * @param {string} flnm\n */\nvar extension = function extension(module, flnm) {\n    var filename = flnm || module.filename;\n    var imports = 'var template=require(' + JSON.stringify(templatePath) + ')';\n    var options = JSON.stringify({\n        filename: filename\n    });\n\n    module._compile(imports + '\\n' + 'module.exports = template.compile(' + options + ');', filename);\n};\n\nmodule.exports = extension;"]}